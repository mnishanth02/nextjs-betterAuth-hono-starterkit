---
description: project structure when files need to be created/updated
globs:
alwaysApply: false
---
## General Principles

1.  **Language:** All code MUST be written in **TypeScript** (`.ts` or `.tsx`).
2.  **Formatting/Linting:** Adhere strictly to the rules defined in `biome.json`. Format code using Biome before committing or finalizing changes.
3.  **Package Manager:** Use **Bun** (`bun add`, `bun install`, `bun run`) for package management. Refer to `package.json` for dependencies.
4.  **File Naming:** Use **kebab-case** for file and folder names (e.g., `user-profile.tsx`, `data-access`). Exception: Next.js special files (`page.tsx`, `layout.tsx`) and React components (file nameing  like `user-profles.tsx`). Stick to existing conventions within directories.
5.  **Modularity:** Keep components, functions, and modules focused on a single responsibility.
6.  **Imports:** Use absolute imports relative to the `tsconfig.json` `baseUrl` (e.g., `import { Button } from '@/components/ui/button'`). Avoid relative imports that traverse up many directories (`../../`).
7.  **Consistency:** When adding new features or components, first look for existing patterns in similar files/directories and follow them.

## Directory Structure and Purpose

*   **`app/`**: Core application routing and UI using the Next.js App Router.
    *   **Route Groups `(...)`**: Used for organizing routes and layouts without affecting the URL path (e.g., `(admin)`, `(auth)`, `(root)`). Create new route groups for distinct sections of the app (e.g., `(marketing)`, `(dashboard)`).
    *   **`page.tsx`**: The main UI component for a route segment.
    *   **`layout.tsx`**: Defines a shared layout for a route segment and its children. Place layouts within route groups (`(admin)/layout.tsx`) or at higher levels (`app/layout.tsx`).
    *   **`loading.tsx`**: Convention for showing loading UI during navigation.
    *   **`error.tsx`**: Convention for handling errors within a route segment.
    *   **`not-found.tsx`**: Convention for handling 404 errors.
    *   **`api/`**: Serverless API routes (Route Handlers).
        *   **`api/auth/[...nextauth]/`**: Reserved for NextAuth.js authentication routes. Do not place other API routes here.
        *   we will not build any API route here, we will be using server actions for all the api routes

*   **`components/`**: Reusable React components.
    *   **`ui/`**: Low-level, general-purpose UI components (likely Shadcn/ui). **Prefer using or extending existing components from here.** Add new components here only if they are genuinely reusable, primitive UI elements.
    *   **`common/`**: Components used across multiple features but not primitive UI elements (e.g., `Footer`, `Loader`, `ThemeToggle`).
    *   **Feature-Specific Directories** (`auth/`, `header/`, `sidebar/`): Components specific to a particular feature or section of the UI. Create new directories here for new features (e.g., `components/profile/`, `components/settings/`).
    *   **Composition:** Favor composing complex components from smaller ones found in `ui/` and `common/`.
    *   For Individual components which no need to be shared placec the component in the same directory as the page.tsx file by creating a new directory "components".

*   **`data/`**: Data fetching, manipulation logic, and related configurations.
    *   **`actions/`**: Server Actions for mutations (e.g., form submissions, data updates). Name files logically, often related to the feature or schema (e.g., `auth.actions.ts`, `post.actions.ts`). Use `next-safe-action` if that's the established pattern (`lib/utils/safe-action.ts`).
    *   **`data-access/`**: Functions responsible for querying data from the database (reads). Use Drizzle ORM. Name files logically (e.g., `auth.queries.ts`, `user.queries.ts`).
    *   Files within the `data-access/` should not be imported directly in the UI components. Instead, use Server Actions in `data/actions/` to fetch and mutate data.
    *   Always prefer databse calls in the server components directly to `data-access/**`
    *   **`env/`**: Environment variable validation and parsing (`client-env.ts`, `server-env.ts`). Add new environment variables here.
    *   **`helper/`**: Utility functions specifically related to data handling or database interactions (e.g., `db-helper.ts`).

*   **`drizzle/`**: Drizzle ORM configuration, schema, and migrations.
    *   **`schema/`**: Database table schemas (`auth.ts`, `enums.ts`). Define new tables or modify existing ones here. Use `schema.ts` to export all schemas together.
    *   **`migrations/`**: Database migration files generated by Drizzle Kit. Do not edit these manually unless you know what you are doing. The AI should typically not generate migrations directly but might modify schemas which require a migration to be generated later.
    *   **`db.ts`**: Drizzle database instance setup.

*   **`hooks/`**: Custom React Hooks.
    *   Place reusable, stateful, or side-effect logic here.
    *   Organize into subdirectories if needed (e.g., `general/`, `auth/`).
    *   Name hooks starting with `use` (e.g., `use-mobile.ts`, `use-current-user.ts`).

*   **`lib/`**: Utilities, configuration, providers, and core logic not specific to UI or data fetching.
    *   **`auth.ts`, `auth.config.ts`**: NextAuth configuration. Modify these for auth-related settings.
    *   **`config/`**: Application-wide configuration (`constants.ts`, `navItems.ts`, `site.ts`).
    *   **`provider/`**: React Context providers (`theme-provider`, `modal-provider`, etc.). Wrap the application in necessary providers within `app/layout.tsx` or specific layouts, using the main `providers.tsx` aggregator if appropriate.
    *   **`utils/`**: General utility functions. If this grows large, consider creating subdirectories (e.g., `lib/utils/date.ts`, `lib/utils/string.ts`). `utils.ts` might need refactoring into more specific files.
    *   **`validator/`**: Validation schemas (e.g., using Zod). Name files based on the data they validate (e.g., `ui-validator.ts`).

*   **`middleware.ts`**: Next.js middleware for handling requests before they reach the page or API route. avoaid adding any logingic here.

*   **`public/`**: Static assets (images, fonts, svg files) directly served.

*   **`types/`**: Global TypeScript definitions and type augmentations (e.g., `next-auth.d.ts` for session/user types).

## Specific Technologies & Patterns

*   **UI Components:** Primarily use **Shadcn/ui** components from `components/ui/`. Customize them via `globals.css` or by wrapping/extending them.
*   **Styling:** Use **Tailwind CSS** for styling, leveraging utility classes. Global styles are in `app/globals.css`.
*   **Database:** Use **Drizzle ORM**. Define schemas in `drizzle/schema/` and use query functions in `data/data-access/`.
*   **Authentication:** Use **NextAuth.js**. Configuration is in `lib/auth.ts` and `lib/auth.config.ts`. API route is `app/api/auth/[...nextauth]/route.ts`. Middleware often handles route protection.
*   **Server Actions:** Use for form submissions and mutations, located in `data/actions/`. Potentially uses `next-safe-action` for validation and error handling.
*   **State Management:** Primarily rely on Next.js App Router cache, Server Components, Server Actions, and URL state. For client-side state, use standard React hooks (`useState`, `useReducer`) or simple context. If a dedicated state management library is introduced, document its usage here. Check `components/auth/*-form-provider.tsx` for form state patterns (likely `react-hook-form`).
*   **Forms:** Likely uses `react-hook-form` combined with Zod validators (`lib/validator/`) and Server Actions (`data/actions/`). Follow the pattern in existing forms (e.g., `signin-form.tsx`).

## Adding New Features

1.  **Routing:** Add new routes within the `app/` directory, likely inside an appropriate route group `(groupName)/`. Create `page.tsx` for the UI.
2.  **Layout:** If the new feature requires a specific layout, add a `layout.tsx` in its route directory.
3.  **Components:** Create reusable components under `components/`, either in `common/` or a new feature-specific directory (e.g., `components/feature-name/`). Use `components/ui/` for primitive elements.
4.  **Data Fetching:** Add query functions to `data/data-access/` (e.g., `feature-name.queries.ts`).
5.  **Data Mutation:** Add Server Actions to `data/actions/` (e.g., `feature-name.actions.ts`).
6.  **Types:** Define any shared types in `types/` or colocate simple types within the component/function using them.
7.  **Validation:** Add Zod schemas to `lib/validator/` (e.g., `feature-name-validator.ts`).
8.  **Hooks:** Create custom hooks in `hooks/` if needed for complex client-side logic.
9.  **Constants/Config:** Add relevant constants or configuration to `lib/config/`.
10. **Routes:** Add new path constants to `lib/routes.ts`.

---
